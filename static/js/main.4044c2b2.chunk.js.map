{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","pi","arr","low","high","pivotValue","pivotIndex","swap","partition","forEach","element","console","log","a","b","temp","getHeapSortAnimations","n","heapify","heapSortHelper","largest","l","r","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","javaScriptSortedArray","sort","mergeSortedArray","arraysAreEqual","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4044c2b2.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) {\r\n        // console.log('EQUAL INDEX start:', startIdx, 'end: ', endIdx);\r\n        return;\r\n    }\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    // console.log('bfore first loop: start: ', startIdx, 'end: ', endIdx);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // change their color and revert to normal.\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // Overwrite the value at index k in the original array with the\r\n            // value at index i.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // Overwrite the value at index k in the original array with the\r\n            // value at index j.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    // left Array\r\n    while (i <= middleIdx) {\r\n        // change their color and revert to normal.\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n\r\n        // Overwrite the value at index k in the original array with the\r\n        // value at index i.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    // Right Array\r\n    while (j <= endIdx) {\r\n        // change their color and revert to normal.\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n\r\n        // Overwrite the value at index k in the original array with the\r\n        // value at index j.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    array.forEach(element => {\r\n        console.log(element)\r\n    });\r\n\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    animations,\r\n) {\r\n    if (startIdx < endIdx) {\r\n\r\n        let pi = partition(mainArray, startIdx, endIdx, animations);\r\n\r\n        quickSortHelper(mainArray, startIdx, pi - 1, animations);\r\n        quickSortHelper(mainArray, pi + 1, endIdx, animations);\r\n    }\r\n}\r\n\r\n\r\nfunction partition(arr, low, high, animations) {\r\n    let pivotValue = arr[high]; // pivot  \r\n    let pivotIndex = low;\r\n\r\n    // console.log('index ', j, ' pivot ', pivotValue)\r\n    for (let i = low; i < high; i++) {\r\n\r\n        if (arr[i] < pivotValue) {\r\n\r\n            animations.push([i, high]);\r\n            animations.push([i, high]);\r\n            swap(arr, i, pivotIndex, animations);\r\n            pivotIndex++;\r\n        }\r\n    }\r\n\r\n    animations.push([pivotIndex, high]);\r\n    animations.push([pivotIndex, high]);\r\n    swap(arr, pivotIndex, high, animations);\r\n\r\n    return pivotIndex;\r\n}\r\n\r\nfunction swap(arr, a, b, animations) {\r\n\r\n    // animations.push([a, b]);\r\n    // animations.push([a, b]);\r\n\r\n    animations.push([a, arr[b]]);\r\n\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n\r\n    animations.push([b, a]);\r\n    animations.push([b, a]);\r\n    animations.push([b, temp]);\r\n\r\n\r\n}\r\n\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    heapSortHelper(array, array.length, animations);\r\n\r\n    animations.forEach(element => {\r\n        console.log(element)\r\n    });\r\n    return animations;\r\n}\r\n\r\nfunction heapSortHelper(arr, n, animations) {\r\n    \r\n    // Build heap (rearrange array) \r\n    for (let i = n / 2 - 1; i >= 0; i--) {\r\n\r\n        heapify(arr, n, i, animations);\r\n    }\r\n\r\n    // One by one extract an element from heap \r\n    for (let i = n - 1; i > 0; i--) {\r\n        // Move current root to end \r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([i, arr[0]]);\r\n\r\n    \r\n        let temp = arr[0];\r\n        arr[0] = arr[i];\r\n        arr[i] = temp;\r\n        animations.push([i-1, i-1]);\r\n        animations.push([i-1, i-1]);\r\n        animations.push([i-1, temp]);\r\n        // call max heapify on the reduced heap \r\n        heapify(arr, i, 0, animations);\r\n     \r\n    }\r\n\r\n}\r\nfunction heapify(arr, n, i, animations) {\r\n    let largest = i; // Initialize largest as root \r\n    let l = 2 * i + 1; // left = 2*i + 1 \r\n    let r = 2 * i + 2; // right = 2*i + 2 \r\n\r\n\r\n    // If left child is larger than root \r\n    if (l < n && arr[l] > arr[largest]) \r\n        largest = l;\r\n    \r\n\r\n    // If right child is larger than largest so far \r\n    if (r < n && arr[r] > arr[largest]) \r\n        largest = r;\r\n    \r\n    // If largest is not root \r\n    if (largest !== i) {\r\n        let swap = arr[i];\r\n        arr[i] = arr[largest];\r\n        arr[largest] = swap;\r\n              \r\n\r\n        // Recursively heapify the affected sub-tree \r\n        heapify(arr, n, largest, animations);\r\n\r\n    }\r\n} \r\n","import React from \"react\";\r\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\r\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\r\nimport { getHeapSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(10, 100));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <div>\r\n          <h1>Sorting Visualizer</h1>\r\n        </div>\r\n        <br></br>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}\r\n          ></div>\r\n        ))}\r\n\r\n        <br></br>\r\n        <div className=\"multi-button\">\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n          {/*   <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n      <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n \n <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}